const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

// Configuration de la base de donn√©es
const projectName = process.env.PROJECT_NAME || 'scan-pointage';
const dbPath = process.env.NODE_ENV === 'production' 
  ? `/data/${projectName}/database.sqlite`
  : path.join(process.cwd(), 'database.sqlite');

console.log('üóÑÔ∏è Suppression de toutes les donn√©es de la base de donn√©es...');
console.log(`üìÅ Chemin de la base de donn√©es: ${dbPath}`);

// V√©rifier que la base de donn√©es existe
if (!fs.existsSync(dbPath)) {
  console.error('‚ùå Base de donn√©es non trouv√©e:', dbPath);
  process.exit(1);
}

// Cr√©er une connexion √† la base de donn√©es existante
const db = new sqlite3.Database(dbPath);

// Fonction pour ex√©cuter des requ√™tes SQL
function runQuery(query, params = []) {
  return new Promise((resolve, reject) => {
    db.run(query, params, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this);
      }
    });
  });
}

// Fonction pour supprimer toutes les donn√©es
async function clearAllData() {
  console.log('üßπ Suppression de toutes les donn√©es...');
  
  try {
    // D√©sactiver les contraintes de cl√©s √©trang√®res temporairement
    await runQuery('PRAGMA foreign_keys = OFF');
    
    // Supprimer toutes les donn√©es des tables
    await runQuery('DELETE FROM activity_checklists');
    console.log('‚úÖ Donn√©es supprim√©es de activity_checklists');
    
    await runQuery('DELETE FROM activity_workers');
    console.log('‚úÖ Donn√©es supprim√©es de activity_workers');
    
    await runQuery('DELETE FROM attendance');
    console.log('‚úÖ Donn√©es supprim√©es de attendance');
    
    await runQuery('DELETE FROM activities');
    console.log('‚úÖ Donn√©es supprim√©es de activities');
    
    await runQuery('DELETE FROM workers');
    console.log('‚úÖ Donn√©es supprim√©es de workers');
    
    await runQuery('DELETE FROM admins');
    console.log('‚úÖ Donn√©es supprim√©es de admins');
    
    // R√©activer les contraintes de cl√©s √©trang√®res
    await runQuery('PRAGMA foreign_keys = ON');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des donn√©es:', error);
    process.exit(1);
  }
}

// Fonction pour cr√©er l'admin
async function createAdmin() {
  console.log('üë§ Cr√©ation de l\'administrateur...');
  
  try {
    const adminData = {
      name: 'Asmaa',
      username: 'asgued1997',
      password: 'Issa1998'
    };

    await runQuery(
      'INSERT INTO admins (name, username, password) VALUES (?, ?, ?)',
      [adminData.name, adminData.username, adminData.password]
    );
    
    console.log('‚úÖ Administrateur cr√©√©:');
    console.log(`   Nom: ${adminData.name}`);
    console.log(`   Username: ${adminData.username}`);
    console.log(`   Password: ${adminData.password}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error);
    process.exit(1);
  }
}

// Fonction principale
async function resetDatabase() {
  try {
    await clearAllData();
    await createAdmin();
    
    console.log('\nüéâ Base de donn√©es vid√©e avec succ√®s !');
    console.log('üìä Toutes les tables ont √©t√© vid√©es');
    console.log('üë§ Nouvel admin cr√©√© avec les identifiants fournis');
    console.log('\nüîë Identifiants de connexion admin:');
    console.log('   Username: asgued1997');
    console.log('   Password: Issa1998');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
    process.exit(1);
  } finally {
    db.close();
  }
}

// Ex√©cuter le script
resetDatabase(); 